from pathlib import Path

data = Path('data')
results = Path('results')

GENOME = "GCF_000027025.1_ASM2702v1_genomic"
assembly = data / f"{GENOME}.fna"

prodigal_tf = data / "prodigal.trn"
bakta_db = data / "db-light"
bakta_output = data / "bakta_output"
annotation = bakta_output / f"{GENOME}.gff3"
operonmapper_output = data / "operonmapper_output"

# rule all:
#     input:
        
rule gene_boundaries:
    input:
        assembly
    output:
        prodigal_tf
    conda:
        "envs/prodigal.yaml"
    shell:
        "prodigal -i {input} -t {output}"

rule annotation:
    input:
        assembly=assembly,
        prodigal_tf=prodigal_tf
    output:
        directory(bakta_output)
    conda:
        "envs/bakta.yaml"
    shell:
        """
        ./bakta_loaddb.sh
        bakta {input.assembly} \
            --db {bakta_db} \
            --prodigal-tf {input.prodigal_tf} \
            --output {output}
        """

rule operon_mapping:
    input:
        assembly=assembly,
        annotation=annotation
    output:
        directory(operonmapper_output)
    conda:
        "envs/operonmapper.yaml"
    shell:
        """
        pip install -r operonmapper.requirements.txt
        python operonmapper.py \
            start {input.assembly} \
            --gff {input.annotation} \
            --email yarevan-hackaton@buft.io
            --reuse
            -o {output}
        """

# rule operon_filtering:
#     input:
#         pass
#     output:
#         pass
#     conda:
#         "envs/hmm.yaml"
#     shell:
#         pass